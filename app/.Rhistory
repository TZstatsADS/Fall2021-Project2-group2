x<-1
clc
library(XML)
url<-"http://hz.house.ifeng.com/detail/2014_10_28/50087618_1.shtml"
tbls<-readHTMLTable
tbls<-readHTMLTable(url)
sapply(tbls,nrow)
pop<-readHTMLTable(url,which = 1)
write.csv(pop,file="F:/pop.csv")
---
title: "What Philosophers Think"
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tm)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(tidytext)
library(tidyverse)
library(DT)
library(wordcloud)
library(scales)
library(gridExtra)
library(ngram)
library(igraph)
library(ggplot2)
library(rsconnect)
library(ggridges)
knitr::opts_chunk$set(echo = TRUE)
data<-read.csv(file = 'C:/Users/orian/Downloads/philosophy_data.csv/philosophy_data.csv')
knitr::opts_chunk$set(echo = TRUE)
data<-read.csv(file = 'philosophy_data.csv')
library(dplyr)
library(tidyr)
library(ggplot2)
data %>% group_by(school) %>% summarise(author_count=n_distinct(author))
boxplot(original_publication_date~school, data=data, main="Original Publication Date Ranges of Texts", xlab="School", ylab="Original Publication Date")
slength<-data %>% group_by(author) %>% summarize(mean_sentence_length=mean(sentence_length)) %>% arrange(desc(mean_sentence_length))
slength
hist(slength$mean_sentence_length, main="Length of Sentences by Philosopher", xlab="School", ylab="Length of Sentence")
slengthy<-data %>% group_by(original_publication_date) %>% summarize(mean_sentence_length=mean(sentence_length)) %>% arrange(desc(mean_sentence_length))
ggplot(slengthy, aes(x=original_publication_date, y=mean_sentence_length)) +
geom_line() +
ggtitle("Length of Sentences Over Time")
library(tidytext)
data1 <- data %>% separate_rows(tokenized_txt) %>% filter(tokenized_txt!="")
data1 %>% group_by(tokenized_txt) %>% count() %>% arrange(desc(n)) %>% anti_join(stop_words, by=c("tokenized_txt"="word"))
data1 %>% anti_join(stop_words, by=c("tokenized_txt"="word")) %>% group_by(school, tokenized_txt) %>% count() %>% arrange(desc(n)) %>% group_by(school) %>% slice(1:5)
data_good<-data1[grepl("good", data1$lemmatized_str, fixed = TRUE),]
data_good %>% anti_join(stop_words, by=c("tokenized_txt"="word")) %>% filter(tokenized_txt!="good") %>% group_by(school, tokenized_txt) %>% count() %>% arrange(desc(n)) %>% group_by(school) %>% slice(1:5)
data_nature<-data1[grepl("nature", data1$lemmatized_str, fixed = TRUE),]
data_nature %>% anti_join(stop_words, by=c("tokenized_txt"="word")) %>% filter(tokenized_txt!="nature") %>% group_by(school, tokenized_txt) %>% count() %>% arrange(desc(n)) %>% group_by(school) %>% slice(1:5)
data_true1<-data1[grepl("true", data1$lemmatized_str, fixed = TRUE),]
data_true2<-data1[grepl("truth", data1$lemmatized_str, fixed = TRUE),]
data_true<-rbind(data_true1, data_true2)
data_true %>% anti_join(stop_words, by=c("tokenized_txt"="word")) %>% filter(tokenized_txt!="true" & tokenized_txt!="truth") %>% group_by(school, tokenized_txt) %>% count() %>% arrange(desc(n)) %>% group_by(school) %>% slice(1:5)
top5<-data1 %>% group_by(tokenized_txt) %>% count() %>% arrange(desc(n)) %>% anti_join(stop_words, by=c("tokenized_txt"="word")) %>% head(5) %>% select(tokenized_txt)
data_count<-data1 %>% inner_join(top5, by="tokenized_txt") %>% group_by(tokenized_txt, original_publication_date) %>% count() %>% arrange(desc(n))
library(ggplot2)
ggplot(data_count, aes(x=original_publication_date, y=n, group=tokenized_txt, color=tokenized_txt)) +
geom_line()
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
library(ggplot2)
library(dplyr)
library(lubridate)
library(xts)
setwd('/Users/YONGXINMA/Desktop')
df <- read.csv(file='COVID-19_Daily_Counts_of_Cases__Hospitalizations__and_Deaths.csv')
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
colnames(df)
ggplot(data=df,aes(x=DATE_TIME,y=CASE_COUNT))+geom_histogram()
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
colnames(df)
ggplot(data=df,aes(x=DATE_TIME,y=CASE_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=probable_case_count))+geom_histogram()
library(ggplot2)
library(dplyr)
library(lubridate)
library(xts)
setwd('/Users/YONGXINMA/Desktop')
df <- read.csv(file='COVID-19_Daily_Counts_of_Cases__Hospitalizations__and_Deaths.csv')
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
colnames(df)
ggplot(data=df,aes(x=DATE_TIME,y=CASE_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=probable_case_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=HOSPITALIZED_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=DEATH_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=DEATH_COUNT_PROBABLE))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=CASE_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=all_case_count_7day_avg))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=HOSP_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=DEATH_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=all_death_count_7day_avg))+geom_line()
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
colnames(df)
ggplot(data=df,aes(x=DATE_TIME,y=BX_CASE_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=bx_probable_case_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=BX_HOSPITALIZED_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=BX_DEATH_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=bx_probable_death_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=BX_CASE_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=bx_all_case_count_7day_avg))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=BX_HOSPITALIZED_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=BX_DEATH_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=bx_all_death_count_7day_avg))+geom_line()
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
colnames(df)
ggplot(data=df,aes(x=DATE_TIME,y=MN_CASE_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=mn_probable_case_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=MN_HOSPITALIZED_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=MN_DEATH_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=mn_probable_death_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=MN_CASE_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=mn_all_case_count_7day_avg))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=MN_HOSPITALIZED_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=MN_DEATH_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=mn_all_death_count_7day_avg))+geom_line()
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
colnames(df)
ggplot(data=df,aes(x=DATE_TIME,y=QN_CASE_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=qn_probable_case_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=QN_HOSPITALIZED_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=QN_DEATH_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=qn_probable_death_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=QN_CASE_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=qn_all_case_count_7day_avg))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=QN_HOSPITALIZED_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=QN_DEATH_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=qn_all_death_count_7day_avg))+geom_line()
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
colnames(df)
ggplot(data=df,aes(x=DATE_TIME,y=SI_CASE_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=si_probable_case_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=SI_HOSPITALIZED_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=SI_DEATH_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=si_probable_death_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=SI_CASE_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=si_all_case_count_7day_avg))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=SI_HOSPITALIZED_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=SI_DEATH_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=si_all_death_count_7day_avg))+geom_line()
install.packages('DataExplorer)
library(DataExplorer)
install.packages('DataExplorer')
library(DataExplorer)
install.packages("DataExplorer")
install.packages('DataExplorer')
install.packages("DataExplorer")
library(DataExplorer)
install.packages("DataExplorer")
install.packages("DataExplorer")
install.packages("DataExplorer")
install.packages("DataExplorer")
install.packages("DataExplorer")
install.packages("DataExplorer")
install.packages("DataExplorer")
install.packages("DataExplorer")
install.packages('DataExplorer')
library(DataExplorer)
install.packages('DataExplorer')
library(DataExplorer)
knitr::opts_chunk$set(echo = TRUE)
fluidPage(
tabsetPanel(
tabPanel('server.R',
code('library(shiny)
shinyServer(function(input, output) {
output$plot=renderPlot({
hist(faithful$eruptions, probability = TRUE, breaks = as.numeric(input$n_breaks),
xlab = "Duration (minutes)", main = "Geyser eruption duration")
dens <- density(faithful$eruptions, adjust = input$bw_adjust)
lines(dens, col = "blue")
})
})')),
tabPanel('ui.R',
code('
shinyUI(
fluidPage(
sidebarPanel(
selectInput("n_breaks", label = "Number of bins:",
choices = c(10, 20, 35, 50), selected = 20),
sliderInput("bw_adjust", label = "Bandwidth adjustment:",
min = 0.2, max = 2, value = 1, step = 0.2)
),
mainPanel(
plotOutput("plot")
)
))
'))
)
)
install.packages('DataExplorer')
library(DataExplorer)
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
library(ggplot)
library(dplyr)
library(ggplot2)
library(dplyr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(tidyr)
library(tidyverse)
library(dplyr)
library(tidyr)
library(lubridate)
library(usmap)
library(dplyr)
library(tidyr)
library(lubridate)
library(usmap)
library(viridis)
library(dplyr)
library(tidyr)
library(lubridate)
library(usmap)
library(viridis)
library(dplyr)
library(tidyr)
library(lubridate)
library(usmap)
library(viridis)
library(ggplot2)
library(ggplot2)
library(dplyr)
library(lubridate)
library(xts)
library(ggplot2)
library(dplyr)
library(lubridate)
library(xts)
setwd('/Users/YONGXINMA/Desktop')
df <- read.csv(file='COVID-19_Daily_Counts_of_Cases__Hospitalizations__and_Deaths.csv')
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
colnames(df)
ggplot(data=df,aes(x=DATE_TIME,y=CASE_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=probable_case_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=HOSPITALIZED_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=DEATH_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=DEATH_COUNT_PROBABLE))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=CASE_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=all_case_count_7day_avg))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=HOSP_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=DEATH_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=all_death_count_7day_avg))+geom_line()
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
colnames(df)
ggplot(data=df,aes(x=DATE_TIME,y=BX_CASE_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=bx_probable_case_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=BX_HOSPITALIZED_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=BX_DEATH_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=bx_probable_death_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=BX_CASE_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=bx_all_case_count_7day_avg))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=BX_HOSPITALIZED_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=BX_DEATH_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=bx_all_death_count_7day_avg))+geom_line()
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
colnames(df)
ggplot(data=df,aes(x=DATE_TIME,y=MN_CASE_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=mn_probable_case_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=MN_HOSPITALIZED_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=MN_DEATH_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=mn_probable_death_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=MN_CASE_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=mn_all_case_count_7day_avg))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=MN_HOSPITALIZED_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=MN_DEATH_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=mn_all_death_count_7day_avg))+geom_line()
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
colnames(df)
ggplot(data=df,aes(x=DATE_TIME,y=QN_CASE_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=qn_probable_case_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=QN_HOSPITALIZED_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=QN_DEATH_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=qn_probable_death_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=QN_CASE_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=qn_all_case_count_7day_avg))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=QN_HOSPITALIZED_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=QN_DEATH_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=qn_all_death_count_7day_avg))+geom_line()
DATE_TIME<- as.Date(df$DATE_OF_INTEREST,'%m/%d/%y')
colnames(df)
ggplot(data=df,aes(x=DATE_TIME,y=SI_CASE_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=si_probable_case_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=SI_HOSPITALIZED_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=SI_DEATH_COUNT))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=si_probable_death_count))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=SI_CASE_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=si_all_case_count_7day_avg))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=SI_HOSPITALIZED_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=SI_DEATH_COUNT_7DAY_AVG))+geom_line()
ggplot(data=df,aes(x=DATE_TIME,y=si_all_death_count_7day_avg))+geom_line()
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse) #read_csv
library(lubridate)
library(usmap)
library(dplyr)
library(ggplot2)
library(tidyr)
library(tidyverse) #read_csv
library(lubridate)
library(usmap)
library(viridis)
shiny::runApp('Documents/GitHub/Fall2021-Project2-group-2/app')
runApp('Documents/GitHub/Fall2021-Project2-group-2/app')
runApp('Documents/GitHub/Fall2021-Project2-group-2/app')
runApp('Documents/GitHub/Fall2021-Project2-group-2/app')
runApp('Documents/GitHub/Fall2021-Project2-group-2/app')
runApp('Documents/GitHub/Fall2021-Project2-group-2/app')
runApp('Documents/GitHub/Fall2021-Project2-group-2/app')
